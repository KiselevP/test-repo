<?php

use Drupal\Core\Url;
use Drupal\file\Entity\File;
use Drupal\Core\Datetime\DateFormatter;
use Drupal\node\NodeInterface;

/**
 * @file
 * Functions to support theming in the mirtekgroup theme.
 */

/**
 * Implements hook_preprocess_HOOK() for html.html.twig.
 *
 * @param mixed[] $variables
 */
function mirtekgroup_preprocess_html(array &$variables): void {

}

/**
 * Implements hook_preprocess_HOOK() for page.html.twig.
 */
function mirtekgroup_preprocess_page(&$variables) {

}


/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function mirtekgroup_preprocess_node(&$variables) {
    $node = Drupal::routeMatch()->getParameter('node');
    if ($node instanceof NodeInterface) {
        if ($node->hasField('field_template') && !$node->get('field_template')->isEmpty()) {
            $variables['attributes']['class'][] = $node->get('field_template')->getString();
        }
    }

    $node = $variables['node'];

    if (isset($variables['content']['field_doc_file'])) {
        // Check if '#items' key exists before accessing it.
        if (isset($variables['content']['field_doc_file']['#items']) && !empty($variables['content']['field_doc_file']['#items'])) {
            // Получаем первый элемент из поля файла, если он есть.
            $file_items = $variables['content']['field_doc_file']['#items'];
            if ($file_items) {
                $file_item = $file_items[0];
                // Загружаем объект файла.
                $file = File::load($file_item->target_id);
                if ($file) {
                    // Получаем публичный URL файла.
                    $variables['file_url'] = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
                }
            }
        }
    }

    $timestamp = $variables['node']->getCreatedTime();
    $variables['formatted_date'] =  \Drupal::service('date.formatter')->format($timestamp, 'created_date');

    $date_parts = explode('  ', $variables['formatted_date']);
    $variables['formatted_day'] = $date_parts[0];
    $variables['formatted_month'] = $date_parts[1];
    $variables['formatted_year'] = $date_parts[2];


    if ($node->hasField('field_images') && !$node->get('field_images')->isEmpty()) {
        // Получите первое изображение.
        $image_item = $node->get('field_images')->first();

        if ($image_item) {
            // Получите объект файла.
            $file = File::load($image_item->target_id);

            if ($file) {
                // Получите URL изображения.
                $file_url = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());

                // Добавьте URL изображения в переменные.
                $variables['first_image_url'] = $file_url;

                // Также можно добавить alt текст.
                $variables['first_image_alt'] = $image_item->alt;
            }
        }
    }
}

function mirtekgroup_preprocess_links__language_block(&$variables) {
    // Получаем список доступных языков.
    $languages = \Drupal::languageManager()->getLanguages();
    // Подготавливаем массив для Twig шаблона.
    $lang_options = [];
    foreach ($languages as $lang_code => $language) {
        // Проверяем, является ли язык текущим.
        $is_current = \Drupal::languageManager()->getCurrentLanguage()->getId() === $lang_code;
        // Получаем URL для переключения на данный язык.
        $url = \Drupal\Core\Url::fromRoute('<current>', [], ['language' => $language])->toString();
        $lang_name='';
        switch ($language->getName()){
            case 'Russian': $lang_name='РУ';break;
            case 'Spanish': $lang_name='ES';break;
            case 'English': $lang_name='EN';break;
        }
        $lang_options[] = [
            'url' => $url,
            'name' => $lang_name,
            'current' => $is_current,
        ];
    }

    $variables['languages'] = $lang_options;
}

function mirtekgroup_preprocess_region(&$variables) {
    $variables['telephone'] = theme_get_setting('telephone');
    $variables['footer_telephone'] = theme_get_setting('footer_telephone');
    $variables['footer_email'] = theme_get_setting('footer_email');
    $variables['telegram'] = theme_get_setting('telegram');
    $variables['rutube'] = theme_get_setting('rutube');
    $variables['vk'] = theme_get_setting('vk');
}

function mirtekgroup_form_system_theme_settings_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state) {
    $form['mirtekgroup_settings'] = [
        '#type' => 'details',
        '#title' => t('Mirtekgroup settings'),
        '#open' => true,
    ];

    $form['mirtekgroup_settings']['telephone'] = [
        '#type' => 'textfield',
        '#title' => t('Telephone number'),
        '#default_value' => theme_get_setting('telephone'),
        '#description' => t('Enter the telephone number to be displayed.'),
    ];

    $form['mirtekgroup_settings']['footer_email'] = [
        '#type' => 'textfield',
        '#title' => t('Footer E-mail'),
        '#default_value' => theme_get_setting('footer_email'),
        '#description' => t('Enter the email to be displayed.'),
    ];

    $form['mirtekgroup_settings']['footer_telephone'] = [
        '#type' => 'textfield',
        '#title' => t('Footer Telephone number'),
        '#default_value' => theme_get_setting('footer_telephone'),
        '#description' => t('Enter the telephone number to be displayed.'),
    ];

    $form['mirtekgroup_settings']['telegram'] = [
        '#type' => 'textfield',
        '#title' => t('Ссылка на телеграм'),
        '#default_value' => theme_get_setting('telegram'),
        '#description' => t('Введите ссылку на телеграм.'),
    ];

    $form['mirtekgroup_settings']['rutube'] = [
        '#type' => 'textfield',
        '#title' => t('Ссылка на rutube'),
        '#default_value' => theme_get_setting('rutube'),
        '#description' => t('Введите ссылку на вконтакте.'),
    ];

    $form['mirtekgroup_settings']['vk'] = [
        '#type' => 'textfield',
        '#title' => t('Ссылка на вконтакте'),
        '#default_value' => theme_get_setting('vk'),
        '#description' => t('Введите ссылку на вконтакте.'),
    ];

    return $form;
}

/**
 * Implements hook_preprocess_paragraph().
// */
function mirtekgroup_preprocess_paragraph(&$variables): void {
    $paragraph = $variables['paragraph'];
    $bundle = $paragraph->bundle();
    $headlines = [];
    $texts = [];

    if ($bundle === 'sybols') {
        // Собираем значения заголовков.
        if ($paragraph->hasField('field_sybols_items')) {
            $i=1;
            foreach ($paragraph->get('field_sybols_items')->referencedEntities() as $item) {
                $variables['items'][$item->id()]["counter"] = $i;
                $i++;
                $variables['items'][$item->id()]["headline"] = $item->get('field_headline')->value;
            }
        }
    }
    if ($bundle === 'video_with_title_and_text' || $bundle === 'video') {
        if ($paragraph->hasField('field_img')) {
            $custom_preview_field = $paragraph->get('field_img')->getValue();

            if (!empty($custom_preview_field)) {
                $file = File::load($custom_preview_field[0]['target_id']);
                if ($file) {
                    $url = \Drupal::service('file_url_generator')->generateAbsoluteString($file->getFileUri());
                    // Устанавливаем кастомное превью для видео
                    $variables['content']['field_video']['#video_embed_field_preview_image'] = $url;
                }
            }
        }

        if ($paragraph->hasField('field_video')) {
            $video_field = $paragraph->get('field_video')->getValue();
            if (!empty($video_field) && isset($video_field[0]['value'])) {
                $variables['video_url'] = $video_field[0]['value'];
            }
        }
    }

    static $counter = 0;
    if ($bundle === 'numbered_section_item') {
        $counter++;
        $variables['counter'] = sprintf('%02d', $counter); // Форматируем номер с ведущими нулями;
    }

    if ($bundle === 'slider') {
        if ($paragraph->hasField('field_type_slider')) {
            $field_type = $paragraph->get('field_type_slider')->value;
            if($field_type === 'row_not_pagination'){
                $variables['class_type_slide'] = 'swiper-row';
            }elseif ($field_type === 'row_with_pagination_and_group'){
                $variables['class_type_slide'] = 'swiper-product';
            }elseif ($field_type === 'slide_with_pagination'){
                $variables['class_type_slide'] = 'swiper-carousel';
            }
        }
    }

    if ($bundle === 'image_with_title_and_text' || $bundle === 'big_image_with_headline_text') {
        if ($paragraph->hasField('field_image_position')) {
            $field_image_position = $paragraph->get('field_image_position')->value;
            $variables['image_position'] = ($field_image_position === 'right') ? 'image-position-right' : '';
        }
    }
}

/**
 * Implements hook_preprocess_taxonomy_term().
 */
function mirtekgroup_preprocess_taxonomy_term(&$variables) {
    if (isset($variables['term']) && $variables['term']->hasField('field_color')) {
        // Получаем массив значений поля field_color.
        $color_values = $variables['term']->field_color->getValue();
        // Проверяем, есть ли значения в массиве.
        if (!empty($color_values)) {
            // Получаем значение цвета из первого элемента массива.
            $color_value = $color_values[0]['color'];
            // Добавляем значение цвета в переменные, чтобы использовать его в шаблоне Twig.
            $variables['color_value'] = $color_value;
        }
    }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 *
 * Add views template suggestions.
 *
 * @inheritdoc
 */
function mirtekgroup_theme_suggestions_views_view_alter(array &$suggestions, array $variables){
    $suggestions[0] = sprintf('views_view__%s', $variables['view']->id());
    $suggestions[1] = sprintf(
        'views_view__%s_%s',
        $variables['view']->id(),
        $variables['view']->getDisplay()->display['id']
    );

    return $suggestions;
}

function mirtekgroup_theme_suggestions_views_view_unformatted_alter(array &$suggestions, array $variables){
    $suggestions[0] = sprintf('views_view_unformatted__%s', $variables['view']->id());

    return $suggestions;
}

function mirtekgroup_page_attachments(array &$attachments) {
    $attachments['#attached']['library'][] = 'mirtekgroup/swiper';
}

/**
 * Implements hook_form_views_exposed_form_alter().
 */
function mirtekgroup_form_views_exposed_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id)
{
    if ($form['#id'] == 'views-exposed-form-teaser-novosti-page-1') {
        // Измените текст первой опции.
        if (isset($form['field_tags_news_target_id']['#options']['All'])) {
            $form['field_tags_news_target_id']['#options']['All'] = t('Все новости');
        }
    }

    if ($form['#id'] == 'views-exposed-form-faq-page-1') {
        // Измените текст первой опции.
        if (isset($form['field_faq_chapters_target_id']['#options']['All'])) {
            $form['field_faq_chapters_target_id']['#options']['All'] = t('Все категории');
        }
    }
}

/**
 * Implements hook_theme_suggestions_form_alter().
 */
function mirtekgroup_theme_suggestions_form_alter(array &$suggestions, array $variables) {
    // Проверяем наличие ID формы
    if (isset($variables['element']['#form_id'])) {
        $form_id = $variables['element']['#form_id'];

        // Добавляем предложение для шаблона на основе form_id
        // Формат: form__form_id
        $suggestions[] = 'form__' . $form_id;
    }
}
